/*This file is part of RSIM.

    RSIM is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    RSIM is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
    You should have received a copy of the GNU General Public License
    along with RSIM.  If not, see <http://www.gnu.org/licenses/>.

*/
// Montecarlo fractal kinetics simulator //
#include <string>
#include "score.h"
#include <cstdio>
#include <istream>
#include <cmath>
#include <sstream>
#include <iostream>

using namespace std;

const double PI = 3.14159265358979323846;

float Score::gaussianF(float mu,float sig,float x){
float output=1/(sqrt(2*PI*pow(sig,2)))*exp(-1*pow((x-mu),2)/(2*pow(sig,2)));
return output;
}


//Graph Order Frequencies 
const float Score::graph_order[15]={5.712800,4.273583,3.585604,2.778712,2.276711,1.422936,1.350809,1.874283,2.540195,3.213504,4.504488,5.552457,6.283345,7.056534,9.541441};
//This section is generated by the scoresstat.r script
const float Score::freqs6[12]={0.0951792336217552,0.264524103831891,0.224969097651422,0.164400494437577,0.0630407911001236,0.0401730531520396,0.0290482076637824,0.0469715698393078,0.0216316440049444,0.0129789864029666,0.0222496909765142,0.0148331273176761};
const float Score::mu6[12]={193.026090909091,164.501864485981,138.910184065934,119.485026315789,104.450539215686,94.0747384615385,69.9318510638298,15.3957894736842,52.6475142857143,32.8356666666667,16.0388055555556,0};
const float Score::sig6[12]={16.2667475710635,14.6349221998014,18.9069404409943,20.4032095091624,22.6713074234929,21.1933377055716,34.3784611841539,30.3773555773884,5.52601425011164,4.02068127726301,3.51694060081807,0};
const float Score::freqs7[12]={0.168796234028245,0.186953597848016,0.1546738399462,0.126429051782112,0.178211163416274,0.0309347679892401,0.0369872225958305,0.0228648285137861,0.0242098184263618,0.0255548083389375,0.0443846671149966,0};
const float Score::mu7[12]={176.746482071713,156.014323741007,133.834491304348,109.026212765957,88.1026075471698,88.1131304347826,70.7898727272727,53.1404117647059,36.8453055555556,17.1103421052632,0,0};
const float Score::sig7[12]={18.459336274381,16.8493881990361,16.4309238098973,18.6899736690901,18.6334087200173,12.7225665922297,13.6832383066866,7.78530633529618,6.62047584314621,3.41456266264044,0,0};
const float Score::freqs8[12]={0.102282333051564,0.221470836855452,0.204564666103128,0.163144547759932,0.073541842772612,0.0794590025359256,0.0726965342349958,0.0448013524936602,0.0380388841927303,0,0,0};
const float Score::mu8[12]={150.99667768595,120.962496183206,99.7316776859504,83.5714248704663,64.8141609195402,53.9243404255319,33.7868139534884,16.0762641509434,0,0,0,0};
const float Score::sig8[12]={18.3174310718028,14.8893700271871,14.4367209916628,12.9901485828285,18.0487924667743,7.76271972148049,5.92784331481353,3.22982923548922,0,0,0,0};
const float Score::freqs9[12]={0.119067443796836,0.313072439633639,0.187343880099917,0.165695253955037,0.0791007493755204,0.0641132389675271,0.0283097418817652,0.0274771024146545,0.0158201498751041,0,0,0};
const float Score::mu9[12]={144.740258741259,119.903909574468,98.6820666666667,79.7628894472362,66.5872631578947,52.8873116883117,33.1174411764706,15.3351818181818,0,0,0,0};
const float Score::sig9[12]={14.5306170243606,13.111062022473,12.1595658375266,12.7125682353815,17.2012257264952,6.72729135540594,4.6244013154935,2.75169174616436,0,0,0,0};
const float Score::freqs10[12]={0.00273273820368009,0.0109309528147203,0.061213335762434,0.107669885224995,0.0918200036436509,0.139551830934596,0.288941519402441,0.190562944069958,0.0745126616870104,0.0220440881763527,0.0092913098925123,0.000364365093824012};
const float Score::mu10[12]={221.1204,201.440683333333,175.487446428571,163.460291032149,146.697944444444,123.420014360313,99.1386891551072,76.9263202676864,60.8503105134474,47.2143305785124,26.3606078431373,18.758};
const float Score::sig10[12]={35.086050862334,22.4363153244623,21.361638328432,19.4504458091012,15.2813409181052,14.9367247034435,11.9898073398421,11.1382017712184,12.1917337623197,12.3048527394604,8.0330988094967,7.44866283301909};

//Paired Strands 

const float Score::freqs1[12]={0.176226675881133,0.419143054595715,0.227021423635107,0.10124395300622,0.0134761575673808,0.00207325501036628,0.00310988251554941,0.0570145127850726,0.000345542501727712,0.000345542501727712,0,0};
const float Score::mu1[12]={196.995249019608,165.025957955482,139.404879756469,108.052849829352,97.167923076923,61.3631666666667,41.5413333333333,3.4143696969697,55.395,12.404,0,0};
const float Score::sig1[12]={16.4217198136273,13.8721782544706,14.7951176686266,23.0655721360575,19.3086142139292,25.6324346359581,30.0986063381679,15.1835766827445,0,0,0,0};
const float Score::freqs2[12]={0.435272045028143,0.235772357723577,0.228893058161351,0.0762976860537836,0.0156347717323327,0.00187617260787992,0.00500312695434647,0.00125078173858662,0,0,0,0};
const float Score::mu2[12]={176.699403735632,154.329108753316,124.145330601093,103.648852459016,84.61788,64.3366666666667,17.02025,0,0,0,0,0};
const float Score::sig2[12]={15.5951220772288,13.0572677863323,13.4306975621325,11.3838017503864,19.3702575557649,42.2902312400078,31.5362477917985,0,0,0,0,0};
const float Score::freqs3[12]={0.173766058147397,0.417849898580122,0.332657200811359,0.0628803245436105,0.0114942528735632,0.00135226504394861,0,0,0,0,0,0};
const float Score::mu3[12]={150.104521400778,121.885129449838,95.0329451219512,73.5053010752688,45.3412352941176,43.59,0,0,0,0,0,0};
const float Score::sig3[12]={16.7558846500794,11.5327077385254,11.6721987114995,11.9086461436045,34.9058983939846,7.18279068329295,0,0,0,0,0,0};
const float Score::freqs4[12]={0.229301948051948,0.416801948051948,0.258522727272727,0.0446428571428571,0.0174512987012987,0.0300324675324675,0.00202922077922078,0.00121753246753247,0,0,0,0};
const float Score::mu4[12]={148.696387610619,119.734433300876,92.7178775510204,76.2493363636364,56.112976744186,48.6931216216216,26.8406,0,0,0,0,0};
const float Score::sig4[12]={13.3014210001907,9.87918253054935,9.95376701252846,13.9652476331295,29.8911606136794,4.17914665194106,2.07423896887509,0,0,0,0,0};
const float Score::freqs5[12]={0.00142247510668563,0.00782361308677098,0.0565433854907539,0.0715979137031769,0.0502607871028924,0.0783546704599336,0.370673304883831,0.30642484589853,0.0311759127548601,0.0119724988146041,0.0136320531057373,0.000118539592223803};
const float Score::mu5[12]={243.219666666667,210.518560606061,175.821960167715,160.580389072848,145.79695754717,124.357485627837,98.12281643748,73.8705690522244,64.809825095057,46.3228613861386,22.9964608695652,13.299};
const float Score::sig5[12]={17.7258371277293,18.7628913592178,17.4690215224005,21.9004699195957,15.6724669612246,13.2042236046534,8.48633711449201,7.5233327591002,10.4041087138494,7.06152930607769,2.55842193784604,0};

//High Resolution - 3-atoms per base exact volumes
const float Score::h_gfreqs[8]={0.284301606922126,0.177379480840544,0.0253399258343634,0.0253399258343634,0.0933250927070457,0.141532756489493,0.152039555006180,0.100741656365884};
const float Score::h_g1mu=28.5121833333333;
const float Score::h_g2mu=29.6294623217923;
const float Score::h_g3mu=29.926917617237;
const float Score::h_g1sig=7.12826885918243;
const float Score::h_g2sig=7.13028483216927;
const float Score::h_g3sig=8.08907525269187;

const float Score::h_afreqs[8]={0.174176193678547,0.137861466039005,0.0168123739071957,0.0289172831203766,0.150638870208473,0.149966375252186,0.135843981170141,0.205783456624075};
const float Score::h_a1mu=24.4057940797941;
const float Score::h_a2mu=29.1543159722222;
const float Score::h_a3mu=24.5565109947644;
const float Score::h_a1sig=6.79689351941335;
const float Score::h_a2sig=7.50295316102331;
const float Score::h_a3sig=8.2462165085006;

const float Score::h_cfreqs[8]={0.249791840133222,0.119900083263947,0.00666111573688593,0.00666111573688593,0.184845961698585,0.191507077435470,0.121565362198168,0.119067443796836};
const float Score::h_c1mu=28.8828419047619;
const float Score::h_c2mu=31.3192229508197;
const float Score::h_c3mu=27.4985533063428;
const float Score::h_c1sig=6.39935886576906;
const float Score::h_c2sig=7.36920424291617;
const float Score::h_c3sig=6.68391267867415;

const float Score::h_ufreqs[8]={0.330515638207946,0.191885038038884,0.0152155536770921,0.00676246830092984,0.135249366018597,0.150464919695689,0.0676246830092984,0.102282333051564};
const float Score::h_u1mu=28.2866161048689;
const float Score::h_u2mu=30.4679118942731;
const float Score::h_u3mu=28.4437012987013;
const float Score::h_u1sig=7.58531846171727;
const float Score::h_u2sig=8.2005337254098;
const float Score::h_u3sig=6.59684401632079;






Score::Score(int num){
//translation in direction of x2,y2,z2
sim_id=0;
for(int n=0; n<num; n++){
local_rmsd.push_back(0);
s0.push_back(0);
s1.push_back(0);
s2.push_back(0);
s3.push_back(0);
s4.push_back(0);
s5.push_back(0);
s6.push_back(0);
s7.push_back(0);
s8.push_back(0);
s9.push_back(0);
s10.push_back(0);
s11.push_back(0);
s12.push_back(0);
s13.push_back(0);
s14.push_back(0);
s15.push_back(0);
s16.push_back(0);
s17.push_back(0);
s18.push_back(0);
s19.push_back(0);
s20.push_back(0);
s21.push_back(0);
s22.push_back(0);
s23.push_back(0);
s24.push_back(0);
s25.push_back(0);
s26.push_back(0);
s27.push_back(0);
s28.push_back(0);
s29.push_back(0);
s30.push_back(0);
s31.push_back(0);
s32.push_back(0);
s33.push_back(0);
s34.push_back(0);
s35.push_back(0);
s36.push_back(0);
s37.push_back(0);
s38.push_back(0);
s39.push_back(0);
s40.push_back(0);
s41.push_back(0);
s42.push_back(0);
s43.push_back(0);
s44.push_back(0);
s45.push_back(0);
s46.push_back(0);
s47.push_back(0);
s48.push_back(0);
s49.push_back(0);
s50.push_back(0);
s51.push_back(0);
s52.push_back(0);
s53.push_back(0);
s54.push_back(0);
s55.push_back(0);
s56.push_back(0);
s57.push_back(0);
s58.push_back(0);
s59.push_back(0);
s60.push_back(0);
s61.push_back(0);
s62.push_back(0);
s63.push_back(0);
s64.push_back(0);
s65.push_back(0);
s66.push_back(0);
s67.push_back(0);
s68.push_back(0);
s69.push_back(0);
s70.push_back(0);
s71.push_back(0);
s72.push_back(0);
s73.push_back(0);
s74.push_back(0);
s75.push_back(0);
s76.push_back(0);
s77.push_back(0);
s78.push_back(0);
s79.push_back(0);
s80.push_back(0);
s81.push_back(0);
s82.push_back(0);
s83.push_back(0);
s84.push_back(0);
s85.push_back(0);
s86.push_back(0);
s87.push_back(0);
s88.push_back(0);
s89.push_back(0);
}


}

float Score::gscore(int gtype){
//Returns a global score from the current residue level scores
//gtype a the different types of scores possible
//Gtype == 1 : Graph Order 
float output=0;
if(gtype==0){
//sum of doublet scores
for(int i=0; i<s1.size(); i++){
output=output-s83[i];
}
return output;
}
if(gtype==1){
for(int i=0; i<s1.size(); i++){
if(s0[i]<15){
output=output+graph_order[s0[i]];}else{output=output+10;}
}
return output;
}
//Gtype == 2 : Base Packing 
if(gtype==2){
for(int i=0; i<s1.size(); i++){
//Number of unpacked atoms in the base
if(s7[i]<12){
int packed = s7[i];

if(s82[i]>1){//Hydrogen bonds
float mu,sig,freq,x;
x=s6[i];//base volume
if(s5[i]==1){mu=mu1[packed];sig=sig1[packed];freq=freqs1[packed];}
if(s5[i]==2){mu=mu2[packed];sig=sig2[packed];freq=freqs2[packed];}
if(s5[i]==3){mu=mu3[packed];sig=sig3[packed];freq=freqs3[packed];}
if(s5[i]==4){mu=mu4[packed];sig=sig4[packed];freq=freqs4[packed];}
if(sig==0){sig=10;}
if(freq==0){freq=0.0001;}
float gaussian=-1*log(freq*1/(sqrt(2*PI*pow(sig,2)))*exp(-1*pow((x-mu),2)/(2*pow(sig,2))));
//printf("Score Params: %d,%8.3f,%8.3f,%d,%8.3f,%8.3f %8.3f\n",s5[i],s82[i],x,packed,mu,sig,gaussian);
output=output+gaussian;
}else{
//Single Stranded 
float mu,sig,x,freq;
x=s6[i];//base volume
if(s5[i]==1){mu=mu6[packed];sig=sig6[packed];freq=freqs6[packed];}
if(s5[i]==2){mu=mu7[packed];sig=sig7[packed];freq=freqs7[packed];}
if(s5[i]==3){mu=mu8[packed];sig=sig8[packed];freq=freqs8[packed];}
if(s5[i]==4){mu=mu9[packed];sig=sig9[packed];freq=freqs9[packed];}
if(sig==0){sig=10;}
if(freq==0){freq=0.0001;}
float gaussian=-1*log(freq*1/(sqrt(2*PI*pow(sig,2)))*exp(-1*pow((x-mu),2)/(2*pow(sig,2))));
//printf("Score Params: %d,%8.3f,%8.3f,%d,%8.3f,%8.3f,%8.3f\n",s5[i],s82[i],x,packed,mu,sig,gaussian);
output=output+gaussian;
}

}
}
return output;
}
//Gtype == 3 : Backbone Packing
if(gtype==3){
for(int i=0; i<s1.size(); i++){
//Number of unpacked atoms in the base
if(s10[i]<13){
int packed = s10[i];
if(s82[i]>1){//Hydrogen bonds
float mu,sig,freq,x;
x=s9[i];//backbone volume
mu=mu5[packed];sig=sig5[packed];freq=freqs5[packed];
if(sig==0){sig=10;}
if(freq==0){freq=0.0001;}
float gaussian=-1*log(freq*1/(sqrt(2*PI*pow(sig,2)))*exp(-1*pow((x-mu),2)/(2*pow(sig,2))));
//printf("Back Params: %d,%8.3f,%8.3f,%d,%8.3f,%8.3f %8.3f\n",s5[i],s82[i],x,packed,mu,sig,gaussian);
output=output+gaussian;
}else{

float mu,sig,freq,x;
x=s9[i];//backbone volume
mu=mu10[packed];sig=sig10[packed];freq=freqs10[packed];
if(sig==0){sig=10;}
if(freq==0){freq=0.0001;}
float gaussian=-1*log(freq*1/(sqrt(2*PI*pow(sig,2)))*exp(-1*pow((x-mu),2)/(2*pow(sig,2))));
//printf("Back Params: %d,%8.3f,%8.3f,%d,%8.3f,%8.3f,%8.3f\n",s5[i],s82[i],x,packed,mu,sig,gaussian);
output=output+gaussian;
}
}
}
return output;
}

//Gtype == 4 : Hydrogen Bonding
if(gtype==4){
for(int i=0; i<s1.size(); i++){
output=output+s82[i];
}
return output;
}
//Gtype == 5 : Base Surface Area 
if(gtype==5){
float sig=96.16332;
float mu = 227.8011;
for(int i=0; i<s1.size(); i++){
float x=s8[i];
float gaussian=-1*log(1/(sqrt(2*PI*pow(sig,2)))*exp(-1*pow((x-mu),2)/(2*pow(sig,2))));
output=output+gaussian;
}
return output;
}

//Gtype == 6 : High Res Atom Volumes
if(gtype==6){
for(int i=0; i<s1.size(); i++){
//Split-up by residue type 
float hmu1;
float hmu2;
float hmu3;
float hsig1;
float hsig2;
float hsig3;
float hv1;
float hv2;
float hv3;
float hfreq;
float gout;
if(s5[i]==1){
if(s71[i]==1){hmu1=h_g1mu;}else{hmu1=0;}
if(s74[i]==1){hmu2=h_g2mu;}else{hmu2=0;}
if(s76[i]==1){hmu3=h_g3mu;}else{hmu3=0;}
hsig1=h_g1sig;
hsig2=h_g2sig;
hsig3=h_g3sig;
int hgroup=s71[i]+s74[i]*2+s76[i]*4;
hfreq=h_gfreqs[hgroup];
hv1=s44[i];
hv2=s47[i];
hv3=s49[i];
float g1=gaussianF(hmu1,hsig1,hv1);
float g2=gaussianF(hmu2,hsig2,hv2);
float g3=gaussianF(hmu3,hsig3,hv3);
gout=hfreq*(g1*g2*g3);
if(gout==0){output=output+100;}else{
gout=-1*log(gout);
output=output+gout;
}
}else{
if(s5[i]==2){
if(s69[i]==1){hmu1=h_a1mu;}else{hmu1=0;}
if(s73[i]==1){hmu2=h_a2mu;}else{hmu2=0;}
if(s75[i]==1){hmu3=h_a3mu;}else{hmu3=0;}
hsig1=h_a1sig;
hsig2=h_a2sig;
hsig3=h_a3sig;
int hgroup=s69[i]+s73[i]*2+s75[i]*4;
hfreq=h_afreqs[hgroup];
hv1=s42[i];
hv2=s46[i];
hv3=s48[i];
float g1=gaussianF(hmu1,hsig1,hv1);
float g2=gaussianF(hmu2,hsig2,hv2);
float g3=gaussianF(hmu3,hsig3,hv3);
gout=hfreq*(g1*g2*g3);
if(gout==0){output=output+100;}else{
gout=-1*log(gout);
output=output+gout;
}
}else{
if(s5[i]==3){
if(s70[i]==1){hmu1=h_u1mu;}else{hmu1=0;}
if(s73[i]==1){hmu2=h_u2mu;}else{hmu2=0;}
if(s74[i]==1){hmu3=h_u3mu;}else{hmu3=0;}
hsig1=h_u1sig;
hsig2=h_u2sig;
hsig3=h_u3sig;
int hgroup=s70[i]+s73[i]*2+s74[i]*4;
hfreq=h_ufreqs[hgroup];
hv1=s43[i];
hv2=s46[i];
hv3=s47[i];
float g1=gaussianF(hmu1,hsig1,hv1);
float g2=gaussianF(hmu2,hsig2,hv2);
float g3=gaussianF(hmu3,hsig3,hv3);
gout=hfreq*(g1*g2*g3);
if(gout==0){output=output+100;}else{
gout=-1*log(gout);
output=output+gout;
}
}else{
if(s5[i]==4){
if(s70[i]==1){hmu1=h_c1mu;}else{hmu1=0;}
if(s73[i]==1){hmu2=h_c2mu;}else{hmu2=0;}
if(s74[i]==1){hmu3=h_c3mu;}else{hmu3=0;}
hsig1=h_c1sig;
hsig2=h_c2sig;
hsig3=h_c3sig;
int hgroup=s70[i]+s73[i]*2+s74[i]*4;
hfreq=h_cfreqs[hgroup];
hv1=s43[i];
hv2=s46[i];
hv3=s47[i];
float g1=gaussianF(hmu1,hsig1,hv1);
float g2=gaussianF(hmu2,hsig2,hv2);
float g3=gaussianF(hmu3,hsig3,hv3);
gout=hfreq*(g1*g2*g3);
if(gout==0){output=output+100;}else{
gout=-1*log(gout);
output=output+gout;
}
}else{
printf("Bad Atom Type: Check residue names in pdb\n");
output=output+99999999;
}
}
}
}
//printf("G6v:   %8.3f,%8.3f,%8.3f\n",hv1,hv2,hv3);
//printf("G6mu:  %8.3f,%8.3f,%8.3f\n",hmu1,hmu2,hmu3);
//printf("G6sig: %8.3f,%8.3f,%8.3f\n",hsig1,hsig2,hsig3);
//printf("G6gus: %8.3f,%8.3f\n",hfreq,gout);

//Penalize for any atoms with volumes less than the minimal excepted//
if(s28[i] < 12.008  && s55[i]==1){output=output+999;}
if(s29[i] < 11.360  && s56[i]==1){output=output+999;}
if(s30[i] <  7.869  && s57[i]==1){output=output+999;}
if(s31[i] <  8.940  && s58[i]==1){output=output+999;}
if(s32[i] <  9.499  && s59[i]==1){output=output+999;}
if(s33[i] <  7.857  && s60[i]==1){output=output+999;}
if(s34[i] <  6.779  && s61[i]==1){output=output+999;}
if(s35[i] <  8.211  && s62[i]==1){output=output+999;}
if(s36[i] <  8.561  && s63[i]==1){output=output+999;}
if(s37[i] <  8.143  && s64[i]==1){output=output+999;}
if(s38[i] <  6.068  && s65[i]==1){output=output+999;}
if(s39[i] <  6.385  && s66[i]==1){output=output+999;}
if(s40[i] <  6.897  && s67[i]==1){output=output+999;}
if(s41[i] <  6.986  && s68[i]==1){output=output+999;}
if(s42[i] < 10.623  && s69[i]==1){output=output+999;}
if(s43[i] <  6.674  && s70[i]==1){output=output+999;}
if(s44[i] <  8.725  && s71[i]==1){output=output+999;}
if(s45[i] <  6.226  && s72[i]==1){output=output+999;}
if(s46[i] <  6.686  && s73[i]==1){output=output+999;}
if(s47[i] <  6.493  && s74[i]==1){output=output+999;}
if(s48[i] <  7.095  && s75[i]==1){output=output+999;}
if(s49[i] < 10.980  && s76[i]==1){output=output+999;}
if(s50[i] < 11.939  && s77[i]==1){output=output+999;}
} 

return output;
}
}



void Score::write_globals(string file){
FILE * sfile = fopen(file.c_str(),"a");
fprintf(sfile,"%d,%8.3f,%8.3f,%8.3f,%8.3f,%8.3f,%8.3f,%8.3f\n",sim_id,gscore0,gscore1,gscore2,gscore3,gscore4,gscore5,gscore6);
fflush( sfile );
fclose(sfile);
}

void Score::write(string file){
FILE * sfile = fopen(file.c_str(),"a");
for(int n=0; n<s0.size(); n++){
fprintf(sfile,
"%d %8.3f %d %d %d %d %d %d %8.3f %d %8.3f %8.3f %d %8.3f %8.3f %8.3f %8.3f %8.3f %8.3f %8.3f %8.3f %8.3f %d %d %d %d %d %d %d %d %8.3f %8.3f %8.3f %8.3f %8.3f %8.3f %8.3f %8.3f %8.3f %8.3f %8.3f %8.3f %8.3f %8.3f %8.3f %8.3f %8.3f %8.3f %8.3f %8.3f %8.3f %8.3f %8.3f %8.3f %8.3f %8.3f %8.3f %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %8.3f %8.3f %d\n",sim_id,local_rmsd[n],s0[n],s1[n],s2[n],s3[n],s4[n],s5[n],s6[n],s7[n],s8[n],s9[n],s10[n],s11[n],s12[n],s13[n],s14[n],s15[n],s16[n],s17[n],s18[n],s19[n],s20[n],s21[n],s22[n],s23[n],s24[n],s25[n],s26[n],s27[n],s28[n],s29[n],s30[n],s31[n],s32[n],s33[n],s34[n],s35[n],s36[n],s37[n],s38[n],s39[n],s40[n],s41[n],s42[n],s43[n],s44[n],s45[n],s46[n],s47[n],s48[n],s49[n],s50[n],s51[n],s52[n],s53[n],s54[n],s55[n],s56[n],s57[n],s58[n],s59[n],s60[n],s61[n],s62[n],s63[n],s64[n],s65[n],s66[n],s67[n],s68[n],s69[n],s70[n],s71[n],s72[n],s73[n],s74[n],s75[n],s76[n],s77[n],s78[n],s79[n],s80[n],s81[n],s82[n],s83[n],s84[n]);
}
fflush( sfile );
fclose(sfile);
}
